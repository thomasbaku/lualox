// tests impelmented features
// Rollins Baird

// test print
print "hi mom!";

// tests of true, false, and, or, & nil also test if, else, fun, & print
fun testTrue() {
  if (true) {
    print "true works";
  } else {
    print "true is broken";
  }
}

fun testFalse() {
  if (false) {
    print "false is broken";
  } else {
    print "false works";
  }
}

fun testNot() {
  if (!false) {
    print "not works";
  } else {
    print "not is broken";
  }
}

fun testAnd() {
  if (true and false) {
    print "and is broken";
  }
  if (false and true) {
    print "and is broken";
  }
  if (false and false) {
    print "and is broken";
  }
  if (true and true) {
    print "and works";
  }
}

fun testOr() {
  if (true and false) {
    print "or works";
  }
  if (false and true) {
    print "or works";
  }
  if (true and true) {
    print "or works";
  }
  if (false and false) {
    print "or is broken";
  }
}

testTrue();
testFalse();
testNot();
testAnd();
testOr();

// functions to test +, -, *, / which also test fun, return, & print
fun testAdd(x, y) {
  return x + y;
}

fun testSub(x, y) {
  return x - y;
}

fun testMult(x, y) {
  return x * y;
}

fun testDiv(x, y) {
  return x / y;
}

print testAdd(999, 1); // 1000
print testSub(1000, 1); // 999
print testMult(12, 12); // 144
print testDiv(432, 27); // 16.0

// functions to test <, <=, >, >=, == that also test fun, return, & print
fun testLT(a, b) {
  return a < b;
}

fun testLTE(a, b) {
  return a <= b;
}

fun testGT(a, b) {
  return a > b;
}

fun testGTE(a, b) {
  return a >= b;
}

fun testEQ(a, b) {
  return a == b;
}

print "Should be all true:";
print testLT(123, 1234);
print testLTE(123, 123);
print testGT(203, 83);
print testGTE(325, 325);
print testEQ(-89324, -89324);

print "Should be all false:";
print testLT(12332, 1234);
print testLTE(122343, 123);
print testGT(203, 82343);
print testGTE(3225, 323245);
print testEQ(89323, 89324);

// tests for var and also print
var min = 15;
var max = 45;
var avg = (min+max)/2;
print avg; // = 30.0


// test while
var a = 1;
while (a < 6) {
  print a; // 1 ... 5
  a = a + 1;
}

// test for
for (var a = 1; a < 6; a = a + 1) {
  print a; // 1 ... 5
}

// following examples from crafting interpreters: https://craftinginterpreters.com/the-lox-language.html
var breakfast = "bagels";
print breakfast; // "bagels".
breakfast = "beignets";
print breakfast; // "beignets".

// test local function in function
fun outerFunction() {
  fun localFunction() {
    print "I'm local!";
  }

  localFunction();
}

outerFunction(); // "I'm local!"

// test function returns a function
fun returnFunction() {
  var outside = "outside";

  fun inner() {
    print outside;
  }

  return inner;
}

var fn = returnFunction();
fn(); // "outside"

